class Solution {
    public int longestCommonPrefix(int[] arr1, int[] arr2) {
        Map<String,Integer> map = new HashMap<>();
        for(int i=0;i<arr1.length;i++){
            String str_num1 = Integer.toString(arr1[i]);
            String prefix = "";
            for(char ch:str_num1.toCharArray()){
                prefix += ch;
                map.put(prefix,map.getOrDefault(prefix,0)+1);
            }
        }
        int long_prefix = 0;
        for(int j=0;j<arr2.length;j++){
            String str_num2 = Integer.toString(arr2[j]);
            String prefix = "";
            for(char ch : str_num2.toCharArray()){
                prefix += ch;
                if(map.containsKey(prefix)){
                    long_prefix =  Math.max( long_prefix,prefix.length());
                }
            }
        }
        return long_prefix;
    }
}
/*
1.create an hashmap to keep track of each element in the array and its count
2.Convert each element in the array to string of characters
3.Store each character in the string in the new array
4.Iterate over each character in the array and each character to the hash map and its no of occurences
5.Initialize an counter variable to count the longest common prefix
6.repeat steps 2,3,4 for arr2
7.check whether the prefix is present in the hashmap
8.If it exists then check whether the current prefix has the longest value than the longest common prefix value
9.If it is greater then return the value of the longest common prefix
*/
